#version 460 core

layout (local_size_x = 32, local_size_y = 32) in;

// Todo: These binding points could pose a problem
layout (binding = 0, rgba32f) readonly uniform image2D u_butterfly_precomp;
layout (binding = 1, rg32f) uniform image2D u_pingpong0;
layout (binding = 2, rg32f) uniform image2D u_pingpong1;

layout(set = 0, binding = 0) uniform FFTParametersUbo {
    int pingpong_index;
    int fft_direction;
    int stage;
} fftUbo;

struct Complex
{
        float real;
        float im;
};

Complex Add(Complex c1, Complex c2)
{
        Complex result = Complex(c1.real + c2.real, c1.im + c2.im);
        return result;
}

Complex Multiply(Complex c1, Complex c2)
{
        Complex result = Complex(c1.real * c2.real - c1.im * c2.im, c1.real * c2.im + c1.im * c2.real);
        return result;
}

void HorizontalButterflies(in ivec2 pixel_pos)
{
        vec4 butterfly_precomp = imageLoad(u_butterfly_precomp, ivec2(fftUbo.stage, pixel_pos.x));

        if (fftUbo.pingpong_index == 0)
        {
                vec2 a_ = imageLoad(u_pingpong0, ivec2(butterfly_precomp.z, pixel_pos.y)).rg;
                vec2 b_ = imageLoad(u_pingpong0, ivec2(butterfly_precomp.w, pixel_pos.y)).rg;

                Complex a = Complex(a_.x, a_.y);
                Complex b = Complex(b_.x, b_.y);
                Complex twiddle_factor = Complex(butterfly_precomp.x, butterfly_precomp.y);

                // Buttefly operation
                Complex result = Add(a, Multiply(twiddle_factor, b));

                imageStore(u_pingpong1, pixel_pos, vec4(result.real, result.im, 0.f, 1.f));
        }
        else
        {
                vec2 a_ = imageLoad(u_pingpong1, ivec2(butterfly_precomp.z, pixel_pos.y)).rg;
                vec2 b_ = imageLoad(u_pingpong1, ivec2(butterfly_precomp.w, pixel_pos.y)).rg;

                Complex a = Complex(a_.x, a_.y);
                Complex b = Complex(b_.x, b_.y);
                Complex twiddle_factor = Complex(butterfly_precomp.x, butterfly_precomp.y);

                // Buttefly operation
                Complex result = Add(a, Multiply(twiddle_factor, b));

                imageStore(u_pingpong0, pixel_pos, vec4(result.real, result.im, 0.f, 1.f));
        }
}

void VerticalButterfiles(in ivec2 pixel_pos)
{
        vec4 butterfly_precomp = imageLoad(u_butterfly_precomp, ivec2(fftUbo.stage, pixel_pos.y));

        if (fftUbo.pingpong_index == 0)
        {
                vec2 a_ = imageLoad(u_pingpong0, ivec2(pixel_pos.x, butterfly_precomp.z)).rg;
                vec2 b_ = imageLoad(u_pingpong0, ivec2(pixel_pos.x, butterfly_precomp.w)).rg;

                Complex a = Complex(a_.x, a_.y);
                Complex b = Complex(b_.x, b_.y);
                Complex twiddle_factor = Complex(butterfly_precomp.x, butterfly_precomp.y);

                // Buttefly operation
                Complex result = Add(a, Multiply(twiddle_factor, b));

                imageStore(u_pingpong1, pixel_pos, vec4(result.real, result.im, 0.f, 1.f));
        }
        else
        {
                vec2 a_ = imageLoad(u_pingpong1, ivec2(pixel_pos.x, butterfly_precomp.z)).rg;
                vec2 b_ = imageLoad(u_pingpong1, ivec2(pixel_pos.x, butterfly_precomp.w)).rg;

                Complex a = Complex(a_.x, a_.y);
                Complex b = Complex(b_.x, b_.y);
                Complex twiddle_factor = Complex(butterfly_precomp.x, butterfly_precomp.y);

                // Buttefly operation
                Complex result = Add(a, Multiply(twiddle_factor, b));

                imageStore(u_pingpong0, pixel_pos, vec4(result.real, result.im, 0.f, 1.f));
        }
}

void main()
{
        ivec2 pixel_pos = ivec2(gl_GlobalInvocationID.xy);
        if (fftUbo.fft_direction == 0) HorizontalButterflies(pixel_pos);
        else if (fftUbo.fft_direction == 1) VerticalButterfiles(pixel_pos);
}
